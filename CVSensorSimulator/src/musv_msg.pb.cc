// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: musv_msg.proto

#include "musv_msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace mUSV {
class RequestDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestData> _instance;
} _RequestData_default_instance_;
class SensorDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorData> _instance;
} _SensorData_default_instance_;
}  // namespace mUSV
static void InitDefaultsRequestData_musv_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mUSV::_RequestData_default_instance_;
    new (ptr) ::mUSV::RequestData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mUSV::RequestData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestData_musv_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestData_musv_5fmsg_2eproto}, {}};

static void InitDefaultsSensorData_musv_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mUSV::_SensorData_default_instance_;
    new (ptr) ::mUSV::SensorData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mUSV::SensorData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SensorData_musv_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSensorData_musv_5fmsg_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

void InitDefaults_musv_5fmsg_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_RequestData_musv_5fmsg_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorData_musv_5fmsg_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_musv_5fmsg_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_musv_5fmsg_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_musv_5fmsg_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_musv_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mUSV::RequestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mUSV::RequestData, tag_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mUSV::SensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mUSV::SensorData, pose_x_),
  PROTOBUF_FIELD_OFFSET(::mUSV::SensorData, pose_y_),
  PROTOBUF_FIELD_OFFSET(::mUSV::SensorData, pose_yaw_),
  PROTOBUF_FIELD_OFFSET(::mUSV::SensorData, obstacle_sensors_),
  PROTOBUF_FIELD_OFFSET(::mUSV::SensorData, puck_sensors_),
  PROTOBUF_FIELD_OFFSET(::mUSV::SensorData, last_updated_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mUSV::RequestData)},
  { 6, -1, sizeof(::mUSV::SensorData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::mUSV::_RequestData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::mUSV::_SensorData_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_musv_5fmsg_2eproto = {
  {}, AddDescriptors_musv_5fmsg_2eproto, "musv_msg.proto", schemas,
  file_default_instances, TableStruct_musv_5fmsg_2eproto::offsets,
  file_level_metadata_musv_5fmsg_2eproto, 2, file_level_enum_descriptors_musv_5fmsg_2eproto, file_level_service_descriptors_musv_5fmsg_2eproto,
};

const char descriptor_table_protodef_musv_5fmsg_2eproto[] =
  "\n\016musv_msg.proto\022\004mUSV\032\037google/protobuf/"
  "timestamp.proto\"\035\n\013RequestData\022\016\n\006tag_id"
  "\030\001 \001(\005\"\250\001\n\nSensorData\022\016\n\006pose_x\030\001 \001(\002\022\016\n"
  "\006pose_y\030\002 \001(\002\022\020\n\010pose_yaw\030\003 \001(\002\022\034\n\020obsta"
  "cle_sensors\030\004 \003(\005B\002\020\001\022\030\n\014puck_sensors\030\005 "
  "\003(\005B\002\020\001\0220\n\014last_updated\030\006 \001(\0132\032.google.p"
  "rotobuf.Timestampb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_musv_5fmsg_2eproto = {
  false, InitDefaults_musv_5fmsg_2eproto, 
  descriptor_table_protodef_musv_5fmsg_2eproto,
  "musv_msg.proto", &assign_descriptors_table_musv_5fmsg_2eproto, 265,
};

void AddDescriptors_musv_5fmsg_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_google_2fprotobuf_2ftimestamp_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_musv_5fmsg_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_musv_5fmsg_2eproto = []() { AddDescriptors_musv_5fmsg_2eproto(); return true; }();
namespace mUSV {

// ===================================================================

void RequestData::InitAsDefaultInstance() {
}
class RequestData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestData::kTagIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestData::RequestData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mUSV.RequestData)
}
RequestData::RequestData(const RequestData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tag_id_ = from.tag_id_;
  // @@protoc_insertion_point(copy_constructor:mUSV.RequestData)
}

void RequestData::SharedCtor() {
  tag_id_ = 0;
}

RequestData::~RequestData() {
  // @@protoc_insertion_point(destructor:mUSV.RequestData)
  SharedDtor();
}

void RequestData::SharedDtor() {
}

void RequestData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestData& RequestData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RequestData_musv_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void RequestData::Clear() {
// @@protoc_insertion_point(message_clear_start:mUSV.RequestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RequestData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 tag_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tag_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mUSV.RequestData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 tag_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mUSV.RequestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mUSV.RequestData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mUSV.RequestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tag_id = 1;
  if (this->tag_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mUSV.RequestData)
}

::google::protobuf::uint8* RequestData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mUSV.RequestData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tag_id = 1;
  if (this->tag_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mUSV.RequestData)
  return target;
}

size_t RequestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mUSV.RequestData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 tag_id = 1;
  if (this->tag_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tag_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mUSV.RequestData)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestData* source =
      ::google::protobuf::DynamicCastToGenerated<RequestData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mUSV.RequestData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mUSV.RequestData)
    MergeFrom(*source);
  }
}

void RequestData::MergeFrom(const RequestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mUSV.RequestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tag_id() != 0) {
    set_tag_id(from.tag_id());
  }
}

void RequestData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mUSV.RequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestData::CopyFrom(const RequestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mUSV.RequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestData::IsInitialized() const {
  return true;
}

void RequestData::Swap(RequestData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestData::InternalSwap(RequestData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tag_id_, other->tag_id_);
}

::google::protobuf::Metadata RequestData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_musv_5fmsg_2eproto);
  return ::file_level_metadata_musv_5fmsg_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SensorData::InitAsDefaultInstance() {
  ::mUSV::_SensorData_default_instance_._instance.get_mutable()->last_updated_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
class SensorData::HasBitSetters {
 public:
  static const ::google::protobuf::Timestamp& last_updated(const SensorData* msg);
};

const ::google::protobuf::Timestamp&
SensorData::HasBitSetters::last_updated(const SensorData* msg) {
  return *msg->last_updated_;
}
void SensorData::clear_last_updated() {
  if (GetArenaNoVirtual() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorData::kPoseXFieldNumber;
const int SensorData::kPoseYFieldNumber;
const int SensorData::kPoseYawFieldNumber;
const int SensorData::kObstacleSensorsFieldNumber;
const int SensorData::kPuckSensorsFieldNumber;
const int SensorData::kLastUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorData::SensorData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mUSV.SensorData)
}
SensorData::SensorData(const SensorData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      obstacle_sensors_(from.obstacle_sensors_),
      puck_sensors_(from.puck_sensors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_last_updated()) {
    last_updated_ = new ::google::protobuf::Timestamp(*from.last_updated_);
  } else {
    last_updated_ = nullptr;
  }
  ::memcpy(&pose_x_, &from.pose_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&pose_yaw_) -
    reinterpret_cast<char*>(&pose_x_)) + sizeof(pose_yaw_));
  // @@protoc_insertion_point(copy_constructor:mUSV.SensorData)
}

void SensorData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SensorData_musv_5fmsg_2eproto.base);
  ::memset(&last_updated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pose_yaw_) -
      reinterpret_cast<char*>(&last_updated_)) + sizeof(pose_yaw_));
}

SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:mUSV.SensorData)
  SharedDtor();
}

void SensorData::SharedDtor() {
  if (this != internal_default_instance()) delete last_updated_;
}

void SensorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorData& SensorData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SensorData_musv_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:mUSV.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_sensors_.Clear();
  puck_sensors_.Clear();
  if (GetArenaNoVirtual() == nullptr && last_updated_ != nullptr) {
    delete last_updated_;
  }
  last_updated_ = nullptr;
  ::memset(&pose_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pose_yaw_) -
      reinterpret_cast<char*>(&pose_x_)) + sizeof(pose_yaw_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SensorData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // float pose_x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_pose_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float pose_y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_pose_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // float pose_yaw = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_pose_yaw(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // repeated int32 obstacle_sensors = 4 [packed = true];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_obstacle_sensors();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        do {
          msg->add_obstacle_sensors(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
        break;
      }
      // repeated int32 puck_sensors = 5 [packed = true];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 42) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
          object = msg->mutable_puck_sensors();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        do {
          msg->add_puck_sensors(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
        break;
      }
      // .google.protobuf.Timestamp last_updated = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::Timestamp::_InternalParse;
        object = msg->mutable_last_updated();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mUSV.SensorData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float pose_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pose_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pose_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pose_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float pose_yaw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pose_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 obstacle_sensors = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_obstacle_sensors())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_obstacle_sensors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 puck_sensors = 5 [packed = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_puck_sensors())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_puck_sensors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp last_updated = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_updated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mUSV.SensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mUSV.SensorData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mUSV.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pose_x = 1;
  if (this->pose_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pose_x(), output);
  }

  // float pose_y = 2;
  if (this->pose_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pose_y(), output);
  }

  // float pose_yaw = 3;
  if (this->pose_yaw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->pose_yaw(), output);
  }

  // repeated int32 obstacle_sensors = 4 [packed = true];
  if (this->obstacle_sensors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_obstacle_sensors_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->obstacle_sensors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->obstacle_sensors(i), output);
  }

  // repeated int32 puck_sensors = 5 [packed = true];
  if (this->puck_sensors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_puck_sensors_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->puck_sensors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->puck_sensors(i), output);
  }

  // .google.protobuf.Timestamp last_updated = 6;
  if (this->has_last_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::last_updated(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mUSV.SensorData)
}

::google::protobuf::uint8* SensorData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mUSV.SensorData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pose_x = 1;
  if (this->pose_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pose_x(), target);
  }

  // float pose_y = 2;
  if (this->pose_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pose_y(), target);
  }

  // float pose_yaw = 3;
  if (this->pose_yaw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->pose_yaw(), target);
  }

  // repeated int32 obstacle_sensors = 4 [packed = true];
  if (this->obstacle_sensors_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _obstacle_sensors_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->obstacle_sensors_, target);
  }

  // repeated int32 puck_sensors = 5 [packed = true];
  if (this->puck_sensors_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _puck_sensors_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->puck_sensors_, target);
  }

  // .google.protobuf.Timestamp last_updated = 6;
  if (this->has_last_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::last_updated(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mUSV.SensorData)
  return target;
}

size_t SensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mUSV.SensorData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 obstacle_sensors = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->obstacle_sensors_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _obstacle_sensors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 puck_sensors = 5 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->puck_sensors_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _puck_sensors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .google.protobuf.Timestamp last_updated = 6;
  if (this->has_last_updated()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *last_updated_);
  }

  // float pose_x = 1;
  if (this->pose_x() != 0) {
    total_size += 1 + 4;
  }

  // float pose_y = 2;
  if (this->pose_y() != 0) {
    total_size += 1 + 4;
  }

  // float pose_yaw = 3;
  if (this->pose_yaw() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mUSV.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorData* source =
      ::google::protobuf::DynamicCastToGenerated<SensorData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mUSV.SensorData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mUSV.SensorData)
    MergeFrom(*source);
  }
}

void SensorData::MergeFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mUSV.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_sensors_.MergeFrom(from.obstacle_sensors_);
  puck_sensors_.MergeFrom(from.puck_sensors_);
  if (from.has_last_updated()) {
    mutable_last_updated()->::google::protobuf::Timestamp::MergeFrom(from.last_updated());
  }
  if (from.pose_x() != 0) {
    set_pose_x(from.pose_x());
  }
  if (from.pose_y() != 0) {
    set_pose_y(from.pose_y());
  }
  if (from.pose_yaw() != 0) {
    set_pose_yaw(from.pose_yaw());
  }
}

void SensorData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mUSV.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mUSV.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {
  return true;
}

void SensorData::Swap(SensorData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorData::InternalSwap(SensorData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  obstacle_sensors_.InternalSwap(&other->obstacle_sensors_);
  puck_sensors_.InternalSwap(&other->puck_sensors_);
  swap(last_updated_, other->last_updated_);
  swap(pose_x_, other->pose_x_);
  swap(pose_y_, other->pose_y_);
  swap(pose_yaw_, other->pose_yaw_);
}

::google::protobuf::Metadata SensorData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_musv_5fmsg_2eproto);
  return ::file_level_metadata_musv_5fmsg_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mUSV
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::mUSV::RequestData* Arena::CreateMaybeMessage< ::mUSV::RequestData >(Arena* arena) {
  return Arena::CreateInternal< ::mUSV::RequestData >(arena);
}
template<> PROTOBUF_NOINLINE ::mUSV::SensorData* Arena::CreateMaybeMessage< ::mUSV::SensorData >(Arena* arena) {
  return Arena::CreateInternal< ::mUSV::SensorData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
