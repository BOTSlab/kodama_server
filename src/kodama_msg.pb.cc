// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kodama_msg.proto
// Protobuf C++ Version: 5.29.3

#include "kodama_msg.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kodama {

inline constexpr SensorData_Position2D::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SensorData_Position2D::SensorData_Position2D(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SensorData_Position2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorData_Position2DDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorData_Position2DDefaultTypeInternal() {}
  union {
    SensorData_Position2D _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorData_Position2DDefaultTypeInternal _SensorData_Position2D_default_instance_;

inline constexpr SensorData_Pose2D::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        yaw_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SensorData_Pose2D::SensorData_Pose2D(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SensorData_Pose2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorData_Pose2DDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorData_Pose2DDefaultTypeInternal() {}
  union {
    SensorData_Pose2D _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorData_Pose2DDefaultTypeInternal _SensorData_Pose2D_default_instance_;

inline constexpr RequestData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : tag_id_{0},
        v_{0},
        w_{0},
        tau_{0},
        scenario_{0},
        targetx_{0},
        targety_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RequestData::RequestData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RequestDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDataDefaultTypeInternal() {}
  union {
    RequestData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDataDefaultTypeInternal _RequestData_default_instance_;

inline constexpr SensorData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        nearby_robot_poses_{},
        nearby_target_positions_{},
        pose_{nullptr},
        timestamp_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SensorData::SensorData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SensorDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorDataDefaultTypeInternal() {}
  union {
    SensorData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorDataDefaultTypeInternal _SensorData_default_instance_;
}  // namespace kodama
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_kodama_5fmsg_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_kodama_5fmsg_2eproto = nullptr;
const ::uint32_t
    TableStruct_kodama_5fmsg_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kodama::RequestData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kodama::RequestData, _impl_.tag_id_),
        PROTOBUF_FIELD_OFFSET(::kodama::RequestData, _impl_.v_),
        PROTOBUF_FIELD_OFFSET(::kodama::RequestData, _impl_.w_),
        PROTOBUF_FIELD_OFFSET(::kodama::RequestData, _impl_.tau_),
        PROTOBUF_FIELD_OFFSET(::kodama::RequestData, _impl_.scenario_),
        PROTOBUF_FIELD_OFFSET(::kodama::RequestData, _impl_.targetx_),
        PROTOBUF_FIELD_OFFSET(::kodama::RequestData, _impl_.targety_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kodama::SensorData_Position2D, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kodama::SensorData_Position2D, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::kodama::SensorData_Position2D, _impl_.y_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kodama::SensorData_Pose2D, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kodama::SensorData_Pose2D, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::kodama::SensorData_Pose2D, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::kodama::SensorData_Pose2D, _impl_.yaw_),
        PROTOBUF_FIELD_OFFSET(::kodama::SensorData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kodama::SensorData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kodama::SensorData, _impl_.pose_),
        PROTOBUF_FIELD_OFFSET(::kodama::SensorData, _impl_.nearby_robot_poses_),
        PROTOBUF_FIELD_OFFSET(::kodama::SensorData, _impl_.nearby_target_positions_),
        PROTOBUF_FIELD_OFFSET(::kodama::SensorData, _impl_.timestamp_),
        0,
        ~0u,
        ~0u,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::kodama::RequestData)},
        {15, -1, -1, sizeof(::kodama::SensorData_Position2D)},
        {25, -1, -1, sizeof(::kodama::SensorData_Pose2D)},
        {36, 48, -1, sizeof(::kodama::SensorData)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kodama::_RequestData_default_instance_._instance,
    &::kodama::_SensorData_Position2D_default_instance_._instance,
    &::kodama::_SensorData_Pose2D_default_instance_._instance,
    &::kodama::_SensorData_default_instance_._instance,
};
const char descriptor_table_protodef_kodama_5fmsg_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\020kodama_msg.proto\022\006kodama\032\037google/proto"
    "buf/timestamp.proto\"t\n\013RequestData\022\016\n\006ta"
    "g_id\030\001 \001(\005\022\t\n\001v\030\002 \001(\005\022\t\n\001w\030\003 \001(\005\022\013\n\003tau\030"
    "\004 \001(\005\022\020\n\010scenario\030\006 \001(\005\022\017\n\007targetX\030\007 \001(\005"
    "\022\017\n\007targetY\030\010 \001(\005\"\254\002\n\nSensorData\022\'\n\004pose"
    "\030\001 \001(\0132\031.kodama.SensorData.Pose2D\0225\n\022nea"
    "rby_robot_poses\030\002 \003(\0132\031.kodama.SensorDat"
    "a.Pose2D\022>\n\027nearby_target_positions\030\003 \003("
    "\0132\035.kodama.SensorData.Position2D\022-\n\ttime"
    "stamp\030\004 \001(\0132\032.google.protobuf.Timestamp\032"
    "\"\n\nPosition2D\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\032+\n\006P"
    "ose2D\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\013\n\003yaw\030\003 \001(\002"
    "b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_kodama_5fmsg_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_kodama_5fmsg_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_kodama_5fmsg_2eproto = {
    false,
    false,
    488,
    descriptor_table_protodef_kodama_5fmsg_2eproto,
    "kodama_msg.proto",
    &descriptor_table_kodama_5fmsg_2eproto_once,
    descriptor_table_kodama_5fmsg_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_kodama_5fmsg_2eproto::offsets,
    file_level_enum_descriptors_kodama_5fmsg_2eproto,
    file_level_service_descriptors_kodama_5fmsg_2eproto,
};
namespace kodama {
// ===================================================================

class RequestData::_Internal {
 public:
};

RequestData::RequestData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kodama.RequestData)
}
RequestData::RequestData(
    ::google::protobuf::Arena* arena, const RequestData& from)
    : RequestData(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE RequestData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void RequestData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, tag_id_),
           0,
           offsetof(Impl_, targety_) -
               offsetof(Impl_, tag_id_) +
               sizeof(Impl_::targety_));
}
RequestData::~RequestData() {
  // @@protoc_insertion_point(destructor:kodama.RequestData)
  SharedDtor(*this);
}
inline void RequestData::SharedDtor(MessageLite& self) {
  RequestData& this_ = static_cast<RequestData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* RequestData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) RequestData(arena);
}
constexpr auto RequestData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(RequestData),
                                            alignof(RequestData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull RequestData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_RequestData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &RequestData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<RequestData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &RequestData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<RequestData>(), &RequestData::ByteSizeLong,
            &RequestData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(RequestData, _impl_._cached_size_),
        false,
    },
    &RequestData::kDescriptorMethods,
    &descriptor_table_kodama_5fmsg_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* RequestData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> RequestData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967056,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kodama::RequestData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 targetY = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RequestData, _impl_.targety_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(RequestData, _impl_.targety_)}},
    // int32 tag_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RequestData, _impl_.tag_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RequestData, _impl_.tag_id_)}},
    // int32 v = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RequestData, _impl_.v_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(RequestData, _impl_.v_)}},
    // int32 w = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RequestData, _impl_.w_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(RequestData, _impl_.w_)}},
    // int32 tau = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RequestData, _impl_.tau_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RequestData, _impl_.tau_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // int32 scenario = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RequestData, _impl_.scenario_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(RequestData, _impl_.scenario_)}},
    // int32 targetX = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RequestData, _impl_.targetx_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(RequestData, _impl_.targetx_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 tag_id = 1;
    {PROTOBUF_FIELD_OFFSET(RequestData, _impl_.tag_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 v = 2;
    {PROTOBUF_FIELD_OFFSET(RequestData, _impl_.v_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 w = 3;
    {PROTOBUF_FIELD_OFFSET(RequestData, _impl_.w_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 tau = 4;
    {PROTOBUF_FIELD_OFFSET(RequestData, _impl_.tau_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 scenario = 6;
    {PROTOBUF_FIELD_OFFSET(RequestData, _impl_.scenario_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 targetX = 7;
    {PROTOBUF_FIELD_OFFSET(RequestData, _impl_.targetx_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 targetY = 8;
    {PROTOBUF_FIELD_OFFSET(RequestData, _impl_.targety_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void RequestData::Clear() {
// @@protoc_insertion_point(message_clear_start:kodama.RequestData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.tag_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.targety_) -
      reinterpret_cast<char*>(&_impl_.tag_id_)) + sizeof(_impl_.targety_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* RequestData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const RequestData& this_ = static_cast<const RequestData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* RequestData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const RequestData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kodama.RequestData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 tag_id = 1;
          if (this_._internal_tag_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_tag_id(), target);
          }

          // int32 v = 2;
          if (this_._internal_v() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_v(), target);
          }

          // int32 w = 3;
          if (this_._internal_w() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_w(), target);
          }

          // int32 tau = 4;
          if (this_._internal_tau() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_tau(), target);
          }

          // int32 scenario = 6;
          if (this_._internal_scenario() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_scenario(), target);
          }

          // int32 targetX = 7;
          if (this_._internal_targetx() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_targetx(), target);
          }

          // int32 targetY = 8;
          if (this_._internal_targety() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_targety(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kodama.RequestData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t RequestData::ByteSizeLong(const MessageLite& base) {
          const RequestData& this_ = static_cast<const RequestData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t RequestData::ByteSizeLong() const {
          const RequestData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kodama.RequestData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 tag_id = 1;
            if (this_._internal_tag_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_tag_id());
            }
            // int32 v = 2;
            if (this_._internal_v() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_v());
            }
            // int32 w = 3;
            if (this_._internal_w() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_w());
            }
            // int32 tau = 4;
            if (this_._internal_tau() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_tau());
            }
            // int32 scenario = 6;
            if (this_._internal_scenario() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_scenario());
            }
            // int32 targetX = 7;
            if (this_._internal_targetx() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_targetx());
            }
            // int32 targetY = 8;
            if (this_._internal_targety() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_targety());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void RequestData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<RequestData*>(&to_msg);
  auto& from = static_cast<const RequestData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kodama.RequestData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tag_id() != 0) {
    _this->_impl_.tag_id_ = from._impl_.tag_id_;
  }
  if (from._internal_v() != 0) {
    _this->_impl_.v_ = from._impl_.v_;
  }
  if (from._internal_w() != 0) {
    _this->_impl_.w_ = from._impl_.w_;
  }
  if (from._internal_tau() != 0) {
    _this->_impl_.tau_ = from._impl_.tau_;
  }
  if (from._internal_scenario() != 0) {
    _this->_impl_.scenario_ = from._impl_.scenario_;
  }
  if (from._internal_targetx() != 0) {
    _this->_impl_.targetx_ = from._impl_.targetx_;
  }
  if (from._internal_targety() != 0) {
    _this->_impl_.targety_ = from._impl_.targety_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RequestData::CopyFrom(const RequestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kodama.RequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void RequestData::InternalSwap(RequestData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestData, _impl_.targety_)
      + sizeof(RequestData::_impl_.targety_)
      - PROTOBUF_FIELD_OFFSET(RequestData, _impl_.tag_id_)>(
          reinterpret_cast<char*>(&_impl_.tag_id_),
          reinterpret_cast<char*>(&other->_impl_.tag_id_));
}

::google::protobuf::Metadata RequestData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SensorData_Position2D::_Internal {
 public:
};

SensorData_Position2D::SensorData_Position2D(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kodama.SensorData.Position2D)
}
SensorData_Position2D::SensorData_Position2D(
    ::google::protobuf::Arena* arena, const SensorData_Position2D& from)
    : SensorData_Position2D(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SensorData_Position2D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SensorData_Position2D::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, y_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::y_));
}
SensorData_Position2D::~SensorData_Position2D() {
  // @@protoc_insertion_point(destructor:kodama.SensorData.Position2D)
  SharedDtor(*this);
}
inline void SensorData_Position2D::SharedDtor(MessageLite& self) {
  SensorData_Position2D& this_ = static_cast<SensorData_Position2D&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SensorData_Position2D::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SensorData_Position2D(arena);
}
constexpr auto SensorData_Position2D::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SensorData_Position2D),
                                            alignof(SensorData_Position2D));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SensorData_Position2D::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SensorData_Position2D_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SensorData_Position2D::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SensorData_Position2D>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SensorData_Position2D::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SensorData_Position2D>(), &SensorData_Position2D::ByteSizeLong,
            &SensorData_Position2D::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SensorData_Position2D, _impl_._cached_size_),
        false,
    },
    &SensorData_Position2D::kDescriptorMethods,
    &descriptor_table_kodama_5fmsg_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SensorData_Position2D::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SensorData_Position2D::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kodama::SensorData_Position2D>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 y = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SensorData_Position2D, _impl_.y_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SensorData_Position2D, _impl_.y_)}},
    // int32 x = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SensorData_Position2D, _impl_.x_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SensorData_Position2D, _impl_.x_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x = 1;
    {PROTOBUF_FIELD_OFFSET(SensorData_Position2D, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 y = 2;
    {PROTOBUF_FIELD_OFFSET(SensorData_Position2D, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SensorData_Position2D::Clear() {
// @@protoc_insertion_point(message_clear_start:kodama.SensorData.Position2D)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SensorData_Position2D::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SensorData_Position2D& this_ = static_cast<const SensorData_Position2D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SensorData_Position2D::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SensorData_Position2D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kodama.SensorData.Position2D)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 x = 1;
          if (this_._internal_x() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_x(), target);
          }

          // int32 y = 2;
          if (this_._internal_y() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_y(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kodama.SensorData.Position2D)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SensorData_Position2D::ByteSizeLong(const MessageLite& base) {
          const SensorData_Position2D& this_ = static_cast<const SensorData_Position2D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SensorData_Position2D::ByteSizeLong() const {
          const SensorData_Position2D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kodama.SensorData.Position2D)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 x = 1;
            if (this_._internal_x() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_x());
            }
            // int32 y = 2;
            if (this_._internal_y() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_y());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SensorData_Position2D::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SensorData_Position2D*>(&to_msg);
  auto& from = static_cast<const SensorData_Position2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kodama.SensorData.Position2D)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (from._internal_y() != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SensorData_Position2D::CopyFrom(const SensorData_Position2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kodama.SensorData.Position2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SensorData_Position2D::InternalSwap(SensorData_Position2D* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorData_Position2D, _impl_.y_)
      + sizeof(SensorData_Position2D::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(SensorData_Position2D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata SensorData_Position2D::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SensorData_Pose2D::_Internal {
 public:
};

SensorData_Pose2D::SensorData_Pose2D(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kodama.SensorData.Pose2D)
}
SensorData_Pose2D::SensorData_Pose2D(
    ::google::protobuf::Arena* arena, const SensorData_Pose2D& from)
    : SensorData_Pose2D(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SensorData_Pose2D::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SensorData_Pose2D::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, yaw_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::yaw_));
}
SensorData_Pose2D::~SensorData_Pose2D() {
  // @@protoc_insertion_point(destructor:kodama.SensorData.Pose2D)
  SharedDtor(*this);
}
inline void SensorData_Pose2D::SharedDtor(MessageLite& self) {
  SensorData_Pose2D& this_ = static_cast<SensorData_Pose2D&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SensorData_Pose2D::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SensorData_Pose2D(arena);
}
constexpr auto SensorData_Pose2D::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SensorData_Pose2D),
                                            alignof(SensorData_Pose2D));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SensorData_Pose2D::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SensorData_Pose2D_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SensorData_Pose2D::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SensorData_Pose2D>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SensorData_Pose2D::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SensorData_Pose2D>(), &SensorData_Pose2D::ByteSizeLong,
            &SensorData_Pose2D::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SensorData_Pose2D, _impl_._cached_size_),
        false,
    },
    &SensorData_Pose2D::kDescriptorMethods,
    &descriptor_table_kodama_5fmsg_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SensorData_Pose2D::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> SensorData_Pose2D::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kodama::SensorData_Pose2D>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 x = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SensorData_Pose2D, _impl_.x_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SensorData_Pose2D, _impl_.x_)}},
    // int32 y = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SensorData_Pose2D, _impl_.y_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SensorData_Pose2D, _impl_.y_)}},
    // float yaw = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(SensorData_Pose2D, _impl_.yaw_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x = 1;
    {PROTOBUF_FIELD_OFFSET(SensorData_Pose2D, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 y = 2;
    {PROTOBUF_FIELD_OFFSET(SensorData_Pose2D, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float yaw = 3;
    {PROTOBUF_FIELD_OFFSET(SensorData_Pose2D, _impl_.yaw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SensorData_Pose2D::Clear() {
// @@protoc_insertion_point(message_clear_start:kodama.SensorData.Pose2D)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.yaw_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SensorData_Pose2D::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SensorData_Pose2D& this_ = static_cast<const SensorData_Pose2D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SensorData_Pose2D::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SensorData_Pose2D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kodama.SensorData.Pose2D)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 x = 1;
          if (this_._internal_x() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_x(), target);
          }

          // int32 y = 2;
          if (this_._internal_y() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_y(), target);
          }

          // float yaw = 3;
          if (::absl::bit_cast<::uint32_t>(this_._internal_yaw()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_yaw(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kodama.SensorData.Pose2D)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SensorData_Pose2D::ByteSizeLong(const MessageLite& base) {
          const SensorData_Pose2D& this_ = static_cast<const SensorData_Pose2D&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SensorData_Pose2D::ByteSizeLong() const {
          const SensorData_Pose2D& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kodama.SensorData.Pose2D)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 x = 1;
            if (this_._internal_x() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_x());
            }
            // int32 y = 2;
            if (this_._internal_y() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_y());
            }
            // float yaw = 3;
            if (::absl::bit_cast<::uint32_t>(this_._internal_yaw()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SensorData_Pose2D::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SensorData_Pose2D*>(&to_msg);
  auto& from = static_cast<const SensorData_Pose2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kodama.SensorData.Pose2D)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (from._internal_y() != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_yaw()) != 0) {
    _this->_impl_.yaw_ = from._impl_.yaw_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SensorData_Pose2D::CopyFrom(const SensorData_Pose2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kodama.SensorData.Pose2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SensorData_Pose2D::InternalSwap(SensorData_Pose2D* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorData_Pose2D, _impl_.yaw_)
      + sizeof(SensorData_Pose2D::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(SensorData_Pose2D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata SensorData_Pose2D::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SensorData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SensorData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SensorData, _impl_._has_bits_);
};

void SensorData::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
SensorData::SensorData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kodama.SensorData)
}
inline PROTOBUF_NDEBUG_INLINE SensorData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kodama::SensorData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        nearby_robot_poses_{visibility, arena, from.nearby_robot_poses_},
        nearby_target_positions_{visibility, arena, from.nearby_target_positions_} {}

SensorData::SensorData(
    ::google::protobuf::Arena* arena,
    const SensorData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SensorData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pose_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kodama::SensorData_Pose2D>(
                              arena, *from._impl_.pose_)
                        : nullptr;
  _impl_.timestamp_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.timestamp_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kodama.SensorData)
}
inline PROTOBUF_NDEBUG_INLINE SensorData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        nearby_robot_poses_{visibility, arena},
        nearby_target_positions_{visibility, arena} {}

inline void SensorData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pose_),
           0,
           offsetof(Impl_, timestamp_) -
               offsetof(Impl_, pose_) +
               sizeof(Impl_::timestamp_));
}
SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:kodama.SensorData)
  SharedDtor(*this);
}
inline void SensorData::SharedDtor(MessageLite& self) {
  SensorData& this_ = static_cast<SensorData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.pose_;
  delete this_._impl_.timestamp_;
  this_._impl_.~Impl_();
}

inline void* SensorData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SensorData(arena);
}
constexpr auto SensorData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SensorData, _impl_.nearby_robot_poses_) +
          decltype(SensorData::_impl_.nearby_robot_poses_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(SensorData, _impl_.nearby_target_positions_) +
          decltype(SensorData::_impl_.nearby_target_positions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SensorData), alignof(SensorData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SensorData::PlacementNew_,
                                 sizeof(SensorData),
                                 alignof(SensorData));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SensorData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SensorData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SensorData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SensorData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SensorData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SensorData>(), &SensorData::ByteSizeLong,
            &SensorData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SensorData, _impl_._cached_size_),
        false,
    },
    &SensorData::kDescriptorMethods,
    &descriptor_table_kodama_5fmsg_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SensorData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> SensorData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SensorData, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kodama::SensorData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.protobuf.Timestamp timestamp = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 3, PROTOBUF_FIELD_OFFSET(SensorData, _impl_.timestamp_)}},
    // .kodama.SensorData.Pose2D pose = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SensorData, _impl_.pose_)}},
    // repeated .kodama.SensorData.Pose2D nearby_robot_poses = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(SensorData, _impl_.nearby_robot_poses_)}},
    // repeated .kodama.SensorData.Position2D nearby_target_positions = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(SensorData, _impl_.nearby_target_positions_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kodama.SensorData.Pose2D pose = 1;
    {PROTOBUF_FIELD_OFFSET(SensorData, _impl_.pose_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kodama.SensorData.Pose2D nearby_robot_poses = 2;
    {PROTOBUF_FIELD_OFFSET(SensorData, _impl_.nearby_robot_poses_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kodama.SensorData.Position2D nearby_target_positions = 3;
    {PROTOBUF_FIELD_OFFSET(SensorData, _impl_.nearby_target_positions_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(SensorData, _impl_.timestamp_), _Internal::kHasBitsOffset + 1, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kodama::SensorData_Pose2D>()},
    {::_pbi::TcParser::GetTable<::kodama::SensorData_Pose2D>()},
    {::_pbi::TcParser::GetTable<::kodama::SensorData_Position2D>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:kodama.SensorData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nearby_robot_poses_.Clear();
  _impl_.nearby_target_positions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SensorData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SensorData& this_ = static_cast<const SensorData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SensorData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SensorData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kodama.SensorData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kodama.SensorData.Pose2D pose = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.pose_, this_._impl_.pose_->GetCachedSize(), target,
                stream);
          }

          // repeated .kodama.SensorData.Pose2D nearby_robot_poses = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_nearby_robot_poses_size());
               i < n; i++) {
            const auto& repfield = this_._internal_nearby_robot_poses().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .kodama.SensorData.Position2D nearby_target_positions = 3;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_nearby_target_positions_size());
               i < n; i++) {
            const auto& repfield = this_._internal_nearby_target_positions().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .google.protobuf.Timestamp timestamp = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.timestamp_, this_._impl_.timestamp_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kodama.SensorData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SensorData::ByteSizeLong(const MessageLite& base) {
          const SensorData& this_ = static_cast<const SensorData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SensorData::ByteSizeLong() const {
          const SensorData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kodama.SensorData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kodama.SensorData.Pose2D nearby_robot_poses = 2;
            {
              total_size += 1UL * this_._internal_nearby_robot_poses_size();
              for (const auto& msg : this_._internal_nearby_robot_poses()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .kodama.SensorData.Position2D nearby_target_positions = 3;
            {
              total_size += 1UL * this_._internal_nearby_target_positions_size();
              for (const auto& msg : this_._internal_nearby_target_positions()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .kodama.SensorData.Pose2D pose = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pose_);
            }
            // .google.protobuf.Timestamp timestamp = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.timestamp_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SensorData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SensorData*>(&to_msg);
  auto& from = static_cast<const SensorData&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kodama.SensorData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_nearby_robot_poses()->MergeFrom(
      from._internal_nearby_robot_poses());
  _this->_internal_mutable_nearby_target_positions()->MergeFrom(
      from._internal_nearby_target_positions());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.pose_ != nullptr);
      if (_this->_impl_.pose_ == nullptr) {
        _this->_impl_.pose_ =
            ::google::protobuf::Message::CopyConstruct<::kodama::SensorData_Pose2D>(arena, *from._impl_.pose_);
      } else {
        _this->_impl_.pose_->MergeFrom(*from._impl_.pose_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.timestamp_ != nullptr);
      if (_this->_impl_.timestamp_ == nullptr) {
        _this->_impl_.timestamp_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_);
      } else {
        _this->_impl_.timestamp_->MergeFrom(*from._impl_.timestamp_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kodama.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SensorData::InternalSwap(SensorData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.nearby_robot_poses_.InternalSwap(&other->_impl_.nearby_robot_poses_);
  _impl_.nearby_target_positions_.InternalSwap(&other->_impl_.nearby_target_positions_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorData, _impl_.timestamp_)
      + sizeof(SensorData::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(SensorData, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::google::protobuf::Metadata SensorData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace kodama
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_kodama_5fmsg_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
